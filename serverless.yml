service: netex-output-service

provider:
    name: aws
    runtime: nodejs12.x
    region: eu-west-2
    stage: ${opt:stage, 'test'}
    stackName: ${self:service}-${self:provider.stage}
    timeout: 30
    memorySize: 512
    iamRoleStatements:
        - Effect: 'Allow'
          Action:
              - 'ssm:GetParameter'
          Resource: '*'
        - Effect: 'Allow'
          Action:
              - 's3:GetObject'
              - 's3:PutObject'
          Resource:
              - !Sub arn:aws:s3:::fdbt-matching-data-${self:provider.stage}/*
              - !Sub arn:aws:s3:::fdbt-unvalidated-netex-data-${self:provider.stage}/*
              - !Sub arn:aws:s3:::fdbt-netex-data-${self:provider.stage}/*
        - Effect: 'Allow'
          Action:
              - ses:SendEmail
              - ses:SendRawEmail
          Resource:
              - '*'

resources:
    Resources:
        MatchingDataBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: fdbt-matching-data-${self:provider.stage}
                BucketEncryption:
                    ServerSideEncryptionConfiguration:
                        - ServerSideEncryptionByDefault:
                              SSEAlgorithm: AES256
                LifecycleConfiguration:
                    Rules:
                        - Id: ExpiryRule
                          Status: Enabled
                          ExpirationInDays: '60'

        NetexDataBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: fdbt-netex-data-${self:provider.stage}
                BucketEncryption:
                    ServerSideEncryptionConfiguration:
                        - ServerSideEncryptionByDefault:
                              SSEAlgorithm: AES256

functions:
    NetexConvertor:
        handler: src/netex-convertor/handler.netexConvertorHandler
        events:
            - s3: MatchingDataBucket
              event: s3:ObjectCreated:*
        vpc:
            securityGroupIds:
                - Fn::ImportValue: ${self:provider.stage}:ReferenceDataUploaderLambdaSG
            subnetIds:
                - Fn::ImportValue: ${self:provider.stage}:PrivateSubnetA
                - Fn::ImportValue: ${self:provider.stage}:PrivateSubnetB
        environment:
            AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
            UNVALIDATED_NETEX_BUCKET: fdbt-unvalidated-netex-data-${self:provider.stage}
            RDS_HOST:
                Fn::ImportValue: ${self:provider.stage}:RdsHostName

    OdhUploader:
        handler: src/odh-uploader/handler.odhUploaderHandler
        events:
            - s3: NetexDataBucket
              event: s3:ObjectCreated:*

plugins:
    - serverless-plugin-typescript
    - serverless-offline

package:
    include:
        - ./src/netex-convertor/point-to-point-tickets/pointToPointTicketNetexTemplate.xml
        - ./src/netex-convertor/period-tickets/periodTicketNetexTemplate.xml
